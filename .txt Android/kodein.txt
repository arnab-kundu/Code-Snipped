kodein
======

build.gradle(:Project)
======================
buildscript {
    ext.kotlin_version = '1.4.10'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'com.google.gms:google-services:4.3.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


build.gradle(:app)
==================
android {

   ....

   buildFeatures  {
        dataBinding true
    }
}

dependencies {    
   
    ......

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    //Kodein Dependency Injection
    implementation "org.kodein.di:kodein-di-generic-jvm:6.2.1"
    implementation "org.kodein.di:kodein-di-framework-android-x:6.2.1"
}

AppDatabase.kt
==============
@Database(entities = [UserEntity::class, FriendsEntity::class], version = 1, views = [], exportSchema = false)
abstract class AppDatabase : RoomDatabase() {


    abstract fun userDao(): UserDao
    abstract fun friendDao(): FriendDao


    companion object {

        @Volatile
        private var instance: AppDatabase? = null
        private var LOCK = Any()

        operator fun invoke(context: Context) = instance ?: synchronized(LOCK) {
            instance ?: buildDatabase(context).also {
                instance = it
            }
        }

        private fun buildDatabase(context: Context) =
            Room.databaseBuilder(
                context.applicationContext,
                AppDatabase::class.java,
                DATABASE_NAME
            ).build()
    }

}

Application.kt
==============
class App : Application(), KodeinAware {

    override val kodein: Kodein = Kodein.lazy {
        import(androidXModule(this@App))

        bind() from singleton { AppDatabase(instance()) }
        bind() from singleton { AppRepository(instance()) }
        bind() from singleton { YourViewModelFactory (instance()) }

    }

}

YourActivity.kt
===============

class MyContactsActivity : AppCompatActivity(), KodeinAware {

    private val TAG = javaClass.simpleName
    override val kodein: Kodein by kodein()
    private val factory: YourViewModelFactory by instance()


YourViewModelFactory.kt
=======================

@Suppress("UNCHECKED_CAST")
class YourViewModelFactory (private val repository: AppRepository) :
    ViewModelProvider.NewInstanceFactory() {


    override fun <T : ViewModel?> create(modelClass: Class<T>): T {
        return YourViewModel(repository) as T
    }
}


AppRepository.kt
=================
class AppRepository(private val db: AppDatabase) {
	fun abc(){
	}
}


YourViewModel.kt
=================
class YourViewModel(private val repository: AppRepository) : AndroidViewModel(App()) {

    fun yourMethod(): LiveData<List<UserEntity>> {
        return repository.abc()

    }

}



























